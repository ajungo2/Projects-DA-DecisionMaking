{
    "collab_server" : "",
    "contents" : "# Model \n\n```{r confusion matrix draw function, include=FALSE}\n\n############# Function for draw the confussion matrix####################################\n\ndraw_confusion_matrix <- function(cm) {\n\n  layout(matrix(c(1,1,2)))\n  par(mar=c(2,2,2,2))\n  plot(c(100, 345), c(300, 450), type = \"n\", xlab=\"\", ylab=\"\", xaxt='n', yaxt='n')\n  title('CONFUSION MATRIX', cex.main=2)\n\n  # create the matrix \n  rect(150, 430, 240, 370, col='#3F97D0')\n  text(195, 435, '0', cex=1.2)\n  rect(250, 430, 340, 370, col='#F7AD50')\n  text(295, 435, '1', cex=1.2)\n  text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)\n  text(245, 450, 'Actual', cex=1.3, font=2)\n  rect(150, 305, 240, 365, col='#F7AD50')\n  rect(250, 305, 340, 365, col='#3F97D0')\n  text(140, 400, '0', cex=1.2, srt=90)\n  text(140, 335, '1', cex=1.2, srt=90)\n\n  # add in the cm results \n  res <- as.numeric(cm$table)\n  text(195, 400, res[1], cex=1.6, font=2, col='white')\n  text(195, 335, res[2], cex=1.6, font=2, col='white')\n  text(295, 400, res[3], cex=1.6, font=2, col='white')\n  text(295, 335, res[4], cex=1.6, font=2, col='white')\n\n  # add in the specifics \n  plot(c(100, 0), c(100, 0), type = \"n\", xlab=\"\", ylab=\"\", \n       main = \"DETAILS\", xaxt='n', yaxt='n')\n  text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)\n  text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)\n  text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)\n  text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)\n  text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)\n  text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)\n  text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)\n  text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)\n  text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)\n  text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)\n\n  # add in the accuracy information \n  text(30, 35, names(cm$overall[1]), cex=1.5, font=2)\n  text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)\n  text(70, 35, names(cm$overall[2]), cex=1.5, font=2)\n  text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)\n}  \n\n```\n\n\n## Select modeling technique\n\nThe modelling technique that we will be using are the following:\n\n------> it is still not finish <------------ \n\n\n| nÂ° | Model        |  Definition | \n|:--:|:-------------|:--------------|   \n| 1  | Logistic <br /> regression   | > Logistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model (a form of binary regression). \n(https://en.wikipedia.org/wiki/Logistic_regression) |\n| 2  | Decision <br /> trees        |   |\n| 3  | Discriminate <br /> analysis |   |\n| 4  | Random <br /> forest         |   |\n| 5  | Neural <br /> network        |   |\n| 6  | XGBoost                      |   |\n\n\nIn order to compare the 6 models show before applying the CAREt library.\n\n## Generate test design \n\n$$H_ {0}$$: The $Model_n$ give the best accuracy and sensitivity.\n\n$$H_ {1}$$: It do not give the best values. \n\nWhere $n= (1,2,3,4,5,6)$ and represent each model choosen in the selection technique section.\n\n\n## Build model\n\nFirstly, we need to standardize the data, as the variables have different scales. We will normalize only the continuous variables, as the categorical and dummy variables have only few different levels.  \n\n```{r scaling, warning=FALSE, message=FALSE, echo=FALSE}\n\n#selecting only the continuous variables to scale them\n\np1<- data_sel %>%  \n      tidyr::gather(variable, value, c(\"DURATION\", \"AMOUNT\", \"INSTALL_RATE\", \n                                       \"AGE\", \"NUM_CREDITS\")) %>% \n      ggplot(aes(x = variable, y = value, fill = variable)) + \n      geom_boxplot() +\n      theme_bw() +\n      coord_flip()+\n      theme(legend.position=\"none\")+\n      theme(legend.title = element_blank())\n      \n      \ndata_scale <- data_sel %>% \n                dplyr::select(DURATION, AMOUNT, INSTALL_RATE, AGE, NUM_CREDITS) %>% \n                scale() %>%  #normalization\n                as.data.frame()\n\n#recreating the other variables to add them back to the dataset of the scaled ones \n\ndata_scale %<>% mutate(\n  CHK_ACCT = data_sel$CHK_ACCT,\n  HISTORY = data_sel$HISTORY,\n  PURPOSE = data_sel$PURPOSE,\n  SAV_ACCT = data_sel$SAV_ACCT,\n  EMPLOYMENT = data_sel$EMPLOYMENT,\n  SEX_MALE = data_sel$SEX_MALE,\n  MALE_SINGLE = data_sel$MALE_SINGLE,\n  MALE_MAR_WID = data_sel$MALE_MAR_WID,\n  CO_APPLICANT = data_sel$CO_APPLICANT,\n  GUARANTOR = data_sel$GUARANTOR,\n  PRESENT_RESIDENT = data_sel$PRESENT_RESIDENT,\n  PROPERTY = data_sel$PROPERTY,\n  OTHER_INSTALL = data_sel$OTHER_INSTALL,\n  RESIDENCE = data_sel$RESIDENCE,\n  JOB = data_sel$JOB, \n  RESPONSE = data_sel$RESPONSE\n)\n\n#reordering variable in the dataset\n\ndata_scale %<>% \n  dplyr::select(CHK_ACCT,DURATION,HISTORY,PURPOSE,AMOUNT,SAV_ACCT,EMPLOYMENT,\n         INSTALL_RATE,SEX_MALE,MALE_SINGLE,MALE_MAR_WID,CO_APPLICANT,GUARANTOR,\n         PRESENT_RESIDENT,PROPERTY,AGE,OTHER_INSTALL,RESIDENCE,NUM_CREDITS,JOB,RESPONSE)\n\n\np2<- data_scale %>%  \n      tidyr::gather(variable, value, c(\"DURATION\", \"AMOUNT\", \"INSTALL_RATE\", \n                                       \"AGE\", \"NUM_CREDITS\")) %>% \n      ggplot(aes(x = variable, y = value, fill = variable)) + \n      geom_boxplot() + \n      theme_bw() +\n      coord_flip()+ \n      theme(legend.position=\"bottom\")+\n      theme(legend.title = element_blank())\n\ngridExtra::grid.arrange(p1, p2, ncol=2, nrow = 1)\n\nrm(p1, p2)\n\n##################quetion--> it is ok that we have negatives values##################\n\n```\n\nNow that the normalization is done, lets move on by creating a training and test set based on the data.This will be done by dividing it in a randomly selection into the two subsets, with 75% of the data in the training set and the remaining 25% in the test set.\n\n\n```{r test and training sets, warning=FALSE, message=FALSE, echo=FALSE}\n\n#so that we always have the same division\nset.seed(2311)\n\n\n#creation of the index to divide the data in the two subsets\nval_index<-createDataPartition(data_scale$RESPONSE, \n                               p=0.75, list=FALSE)\n\n#########training dataset\nTrainData<-as.data.frame(data_scale[val_index,])\n\n########test dataset\nTestData <- data_scale[-val_index,]\n\n####################graph############################################\n\n#table for the graph of training and testing\n\nnames<- c(\"Total\", \"Train\", \"Test\")\nvalues<- c(999, 750, 249)\n\np0<- gridExtra::grid.arrange(tableGrob(data.frame(names,values))) \n\np1<- ggplot2::ggplot(data=data_scale, aes(x= RESPONSE, fill=RESPONSE)) +\n        geom_bar(aes(y = (..count..)/sum(..count..)))+\n        scale_y_continuous(labels=scales::percent) +\n        ylab(\"Freq\")\n\np2<- ggplot2::ggplot(data=TrainData, aes(x= RESPONSE, fill=RESPONSE)) +\n        geom_bar(aes(y = (..count..)/sum(..count..)))+\n        scale_y_continuous(labels=scales::percent) +\n        ylab(\"Freq\")\n\np3<- ggplot2::ggplot(data=TestData, aes(x= RESPONSE, fill=RESPONSE)) +\n        geom_bar(aes(y = (..count..)/sum(..count..)))+\n        scale_y_continuous(labels=scales::percent) +\n        ylab(\"Freq\")\n\n\ngrid.arrange(p0, p1, p2, p3, ncol=2)\n\nrm(p1, p0, p2, p3, names, values) #delete variables\n\n######### missing the tittles##################################################\n\n```\n\nAs, you can see below the data have the same proportion in the dataset, the training and the testing set. We can now move to the modelization. \n\n### M1: Logistic regression\n\n\\[ Z_{i} = ln(\\frac{P_{i}} {1-P_{i}}) = \\beta_0+\\beta_1X_1+...+\\beta_nX_n \\]\n\nTo do so, we are going follow 6 steps:\n\n1) Fitting the model with no balance data\n2) Prediction\n3) Evaluation of the prediction\n4) Fitting the model with balance data\n5) Prediction\n6) Evaluation of the prediction\n\n#### {.tabset .tabset-fade .tabset-pills}\n\n\n##### Fitting the model\n\n```{r glm-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_lg_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"glm\", \n                           family=\"binomial\",trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_lg_fit)\n\n\n```\n\n##### Coefficients \n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n\n#########NOT SURE IF THIS IS NECESSARY#######################\n##variable is significance--> high coefficient = bring high information\n\ntemp <- summary(mod_lg_fit)$coeff[-1,4] < 0.05\n\n############condition: yes or not#####################################\n\ntemp %<>% as.data.frame()  \n\nkable(temp, caption = \"Significance of variable\")\n\n#remove variable temp\nrm(temp) \n\n#########################################################################\n\nmod_lg_fit$coefnames\n\n#########################################################################\n\n```\n\n##### Prediction (unbalance)\n\n```{r predictions lg, echo=FALSE, message=FALSE, warning=FALSE}\n\n#prediction given the model\nlg.pred <- predict(mod_lg_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix lg, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(lg.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n#############remove temporary element\nrm(cm)\n\n#### save the variables#######\n\nsens<- caret::sensitivity(table(as.factor(lg.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(lg.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.791\n\nlogistic<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n```\n\n##### Fitting the model: balance\n\n```{r glm-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_lg_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"glm\", \n                                  family=\"binomial\", \n                                  metric = \"Sens\", #optimize sensitivity\n                                  maximize = TRUE, #maximize the metric\n                                  trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_lg_fitbalance)\n\n\n```\n\n##### Prediction\n\n```{r predictions lgb, echo=FALSE, message=FALSE, warning=FALSE}\n#probability given the model\n\nlg.pred.b <- predict(mod_lg_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix lgb, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(lg.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#### save the variables#######\n\nsens.b<- caret::sensitivity(table(as.factor(lg.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(lg.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.671\n\nlogistic_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n```\n\n####\n\n\n### M2: Decision trees\n\n#### {.tabset .tabset-fade .tabset-pills}\n\n\n##### Fitting the model\n\n```{r rpart ,echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_dt_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"rpart\", \n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_dt_fit$finalModel)\n\n\n```\n\n##### Plot (Unbalance)\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, fig.asp=1.5}\n\n#######plot option 1 #########################\n##plot(mod_dt_fit$finalModel, uniform=TRUE,\n##     main=\"Classification Tree\")\n##text(mod_dt_fit$finalModel, use.n.=TRUE, all=TRUE, cex=.8)\n\n\n#######plot option 2 #########################\nsuppressMessages(library(rattle))\nrattle::fancyRpartPlot(mod_dt_fit$finalModel)\n\n\n```\n\n##### Prediction (unbalance)\n\n```{r predictions rpart, echo=FALSE, message=FALSE, warning=FALSE}\n\n#prediction given the model\ndt.pred <- predict(mod_dt_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix rpart, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(dt.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#############Parameters\n\nsens<- caret::sensitivity(table(as.factor(dt.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(dt.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.739\n\ndecision_tree<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r rpart-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################\n\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_dt_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"rpart\", \n                                  metric = \"Sens\", #optimize sensitivity\n                                  maximize = TRUE, #maximize the metric\n                                  trControl= train_params)\n\n################check outputs################################\nsummary(mod_dt_fitbalance$finalModel)\n\n\n```\n\n##### Plot (balance)\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, fig.asp=1.5}\n\n#######plot option 1 #########################\n##plot(mod_dt_fitbalance$finalModel, uniform=TRUE,\n##     main=\"Classification Tree\")\n##text(mod_dt_fitbalance$finalModel, use.n.=TRUE, all=TRUE, cex=.8)\n\n\n#######plot option 2 #########################\nsuppressMessages(library(rattle))\nrattle::fancyRpartPlot(mod_dt_fitbalance$finalModel)\n\n\n```\n\n##### Prediction\n\n```{r predictions rpartb, echo=FALSE, message=FALSE, warning=FALSE}\n#probability given the model\n\ndt.pred.b <- predict(mod_dt_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix rpartb, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(dt.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n#############Parameters\n\nsens.b<- caret::sensitivity(table(as.factor(dt.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(dt.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.606\n\ndecision_tree_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n```\n\n\n####\n\n\n### M3: Discriminate analysis\n\n#### LDA {.tabset .tabset-fade .tabset-pills}\n\n##### Fitting the model\n\n```{r lda-model ,echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_lda_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"lda\", \n                           family=\"binomial\",trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_lda_fit)\n\n\n```\n\n\n##### Prediction (unbalance)\n\n```{r predictions lda, echo=FALSE, message=FALSE, warning=FALSE}\n\nlda.pred <- predict(mod_lda_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix lda, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(lda.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n#############\nsens<- caret::sensitivity(table(as.factor(lda.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(lda.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.783\n\nlda<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r ldab-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#########################model######################################\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\n\nmod_lda_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"lda\", \n                           family=\"binomial\",\n                           metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE, #maximize the metric\n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_lda_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions ldab, echo=FALSE, message=FALSE, warning=FALSE}\n\nlda.pred.b <- predict(mod_lda_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix ldab, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(lda.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#########\n\nsens.b<- caret::sensitivity(table(as.factor(lda.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(lda.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.695\n\nlda_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n```\n\n####\n\n\n\n\n#### QDA {.tabset .tabset-fade .tabset-pills}\n\n##### Fitting the model\n\n```{r qda-model ,echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_qda_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"qda\", \n                           family=\"binomial\",trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_qda_fit)\n\n\n```\n\n\n##### Prediction (unbalance)\n\n```{r predictions qda, echo=FALSE, message=FALSE, warning=FALSE}\n\nqda.pred <- predict(mod_qda_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix qda, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(qda.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#############\nsens<- caret::sensitivity(table(as.factor(qda.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(qda.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.763\n\nqda<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n\n```\n\n##### Fitting the model: balance\n\n```{r qdab-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#########################model######################################\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\n\nmod_qda_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"qda\", \n                           family=\"binomial\",\n                           metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE, #maximize the metric\n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_qda_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions qdab, echo=FALSE, message=FALSE, warning=FALSE}\n\nqda.pred.b <- predict(mod_qda_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix qdab, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(qda.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n#########\n\nsens.b<- caret::sensitivity(table(as.factor(qda.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(qda.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.679\n\nqda_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n\n```\n\n####\n\n\n\n\n#### FDA {.tabset .tabset-fade .tabset-pills}\n\n##### Fitting the model\n\n```{r fda-model ,echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\n\nlibrary(earth)\nmod_fda_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"fda\", \n                              trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_fda_fit)\n\n\n```\n\n\n##### Prediction (unbalance)\n\n```{r predictions fda, echo=FALSE, message=FALSE, warning=FALSE}\n\nfda.pred <- predict(mod_fda_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix fda, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(fda.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#############\nsens<- caret::sensitivity(table(as.factor(fda.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(fda.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.759\n\nfda<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r fdab-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#########################model######################################\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_fda_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"fda\", \n                                   metric = \"Sens\", #optimize sensitivity\n                                    maximize = TRUE,\n                                    trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_fda_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions fdab, echo=FALSE, message=FALSE, warning=FALSE}\n\nfda.pred.b <- predict(mod_fda_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix fdab, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(fda.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#####################\n\nsens.b<- caret::sensitivity(table(as.factor(fda.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(fda.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.598\n\nfda_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n\n```\n\n####\n\n\n\n\n\n#### MDA {.tabset .tabset-fade .tabset-pills}\n\n##### Fitting the model\n\n```{r mda-model ,echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_mda_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"mda\", \n                           family=\"binomial\",trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_mda_fit)\n\n\n```\n\n\n##### Prediction (unbalance)\n\n```{r predictions mda, echo=FALSE, message=FALSE, warning=FALSE}\n\nmda.pred <- predict(mod_mda_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix mda, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(mda.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n#############remove temporary element\nsens<- caret::sensitivity(table(as.factor(mda.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(mda.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.739\n\nmda<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r mdab-model, echo=FALSE, warning=FALSE, message=FALSE}\n\n#########################model######################################\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_mda_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"mda\", \n                           family=\"binomial\",\n                           metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE,\n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_mda_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions mdab, echo=FALSE, message=FALSE, warning=FALSE}\n\nmda.pred.b <- predict(mod_mda_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix mdab, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(mda.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#########\n\nsens.b<- caret::sensitivity(table(as.factor(mda.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(mda.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.675\n\nmda_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n```\n\n####\n\n\n\n### M4: Random Forest\n\n#### {.tabset .tabset-fade .tabset-pills}\n\n\n##### Fitting the model\n\n```{r rf-model, echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_rf_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"rf\", \n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_rf_fit)\n\n\n```\n\n##### Prediction (unbalance)\n\n```{r predictions rf, echo=FALSE, message=FALSE, warning=FALSE}\n\nrf.pred <- predict(mod_rf_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix rf, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(rf.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n############\nsens<- caret::sensitivity(table(as.factor(rf.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(rf.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.747\n\nrf<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r rfb-model, echo=FALSE, warning=FALSE, message=FALSE}\n\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_rf_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"rf\", \n                           family=\"binomial\",\n                           metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE,\n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_rf_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions rfb, echo=FALSE, message=FALSE, warning=FALSE}\n\nrf.pred.b <- predict(mod_rf_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix mdab, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(rf.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n######################\n\nsens.b<- caret::sensitivity(table(as.factor(rf.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(rf.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.651\n\nrf_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n\n```\n\n####\n\n\n\n\n\n### M5: Neural Networks\n\n#### {.tabset .tabset-fade .tabset-pills}\n\n##### Fitting the model\n\n```{r nn-model, echo=FALSE, message=FALSE, warning=FALSE}\n\n#Same division\nset.seed(1234)\n\n#########################model######################################vvvv\ntrain_params <- trainControl(method = \"repeatedcv\", number = 10, repeats=5) #K-Fold Cross Validation\nmod_nn_fit <- caret::train(RESPONSE ~ ., TrainData, method=\"nnet\", \n                           trControl= train_params)\n\n################check outputs################################\n\n#summary(mod_nn_fit) #this is very long\n\n```\n\n##### plot\n\n```{r , echo=FALSE, message=FALSE, warning=FALSE, fig.asp=2}\n\nlibrary(nnet)\nNeuralNetTools::plotnet(mod_nn_fit$finalModel, y_names = \"yes/no\")\ntitle(\"Graphical Representation of our Neural Network\")\n\n\n```\n\n##### Prediction (unbalance)\n\n```{r predictions nn, echo=FALSE, message=FALSE, warning=FALSE}\n\nnn.pred <- predict(mod_nn_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix nn, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(nn.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n#############\n\nsens<- caret::sensitivity(table(as.factor(nn.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(nn.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.763\n\nnn<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r nnb-model, echo=FALSE, warning=FALSE, message=FALSE}\n\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_nn_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"nnet\", \n                           family=\"binomial\",\n                           metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE,\n                           trControl= train_params)\n\n################check outputs################################\nsummary(mod_nn_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions nnb, echo=FALSE, message=FALSE, warning=FALSE}\n\nnn.pred.b <- predict(mod_nn_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix nnb, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(nn.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n######################\n\nsens.b<- caret::sensitivity(table(as.factor(nn.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(nn.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.679\n\nnn_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n\n```\n\n####\n\n\n\n### M6: XGBoost\n\n#### {.tabset .tabset-fade .tabset-pills}\n\n\n##### Fitting the model\n\n```{r xgb-model, echo=FALSE, message=FALSE, warning=FALSE}\n\n######################### transform data ############\ndata_xgboost <- map_df(data_scale, function(columna) {\n                  columna %>% \n                  as.factor() %>% \n                  as.numeric %>% \n                  { . - 1 } })\n\ntest_xgboost <- sample_frac(data_xgboost, size = 0.249)\ntrain_xgboost <- setdiff(data_xgboost, test_xgboost)\n\n\n#Convertir a DMatrix\n\ntrain_xgb_matrix <-   train_xgboost %>% \n                            dplyr::select(- RESPONSE) %>% \n                            as.matrix() %>% \n                            xgboost::xgb.DMatrix(data = ., label = train_xgboost$RESPONSE)\n#Convertir a DMatrix\n\ntest_xgb_matrix <-  test_xgboost %>% \n                            dplyr::select(- RESPONSE) %>% \n                            as.matrix() %>% \n                            xgboost::xgb.DMatrix(data = ., label = test_xgboost$RESPONSE)\n\n#Same division\nset.seed(1234)\n\n#########################model######################################\ntrain_params <- trainControl(method = \"repeatedcv\", \n                             number = 10, # with n folds \n                             repeats=5) #K-Fold Cross Validation\n\nmod_xgb_fit <- caret::train(RESPONSE ~ ., TrainData, \n                           method=\"xgbTree\", \n                           trControl= train_params)\n\n################check outputs################################vv\nsummary(mod_xgb_fit)\n\n```\n\n##### plot\n\n```{r , echo=FALSE, message=FALSE, warning=FALSE}\n\nmod_xgb_fit$bestTune\n\n\n```\n\n##### Prediction (unbalance)\n\n```{r predictions xgb, echo=FALSE, message=FALSE, warning=FALSE}\n\nxgb.pred <- predict(mod_xgb_fit, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (Unbalance)\n\n```{r confusion matrix xgb, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(xgb.pred), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n######################\n\nsens<- caret::sensitivity(table(as.factor(xgb.pred), as.factor(TestData$RESPONSE)))\nsp<- caret::specificity(table(as.factor(xgb.pred), as.factor(TestData$RESPONSE)))\nacc<- 0.743\n\nxgb<- c(sens , sp, acc)\n\n#############remove temporary element\nrm(cm, sens, sp, acc)\n\n\n```\n\n##### Fitting the model: balance\n\n```{r xgbb-model, echo=FALSE, warning=FALSE, message=FALSE}\n\ntrain_params <- caret::trainControl(method = \"repeatedcv\", number = 10, \n                                    repeats=5, sampling = \"down\", \n                                    summaryFunction = twoClassSummary)\n\nmod_xgb_fitbalance <- caret::train(RESPONSE ~ ., TrainData, method=\"xgbTree\", \n                            metric = \"Sens\", #optimize sensitivity\n                           maximize = TRUE,\n                           trControl= train_params)\n\n################check outputs################################\nsummary(mod_xgb_fitbalance)\n\n\n```\n\n\n##### Prediction\n\n```{r predictions xgbb, echo=FALSE, message=FALSE, warning=FALSE}\n\nxgb.pred.b <- predict(mod_xgb_fitbalance, newdata = TestData)  #predict give me the probability i am looking for the the binomial answer\n\n```\n\n##### Diagnosis (balance)\n\n```{r confusion matrix xgbb, echo=FALSE, message=FALSE, warning=FALSE}\n\n#############confusion matrix \ncm <- confusionMatrix(as.factor(xgb.pred.b), as.factor(TestData$RESPONSE))\n############draw of confusion matrix\ndraw_confusion_matrix(cm)\n\n######################\n\nsens.b<- caret::sensitivity(table(as.factor(xgb.pred.b), as.factor(TestData$RESPONSE)))\nsp.b<- caret::specificity(table(as.factor(xgb.pred.b), as.factor(TestData$RESPONSE)))\nacc.b<- 0.723\n\nxgb_balance<- c(sens.b , sp.b, acc.b)\n\n#############remove temporary element\nrm(cm, sens.b, sp.b, acc.b)\n\n\n```\n\n####\n\n\n\n\n\n## Assess model\n\n```{r , echo=FALSE, message=FALSE, warning=FALSE}\n\nDetails<- c(\"Sensitivity\", \"Specificity\", \"Accuracy\")\nsummary_table<- data.frame(Details, logistic, logistic_balance, \n                           decision_tree, decision_tree_balance,\n                           lda, lda_balance, \n                           qda, qda_balance,\n                           fda, fda_balance, \n                           mda, mda_balance,\n                           rf, rf_balance,\n                           nn, nn_balance,\n                           xgb, xgb_balance)\n                           \n\nsummary_table<-data.frame(t(summary_table[-1]))                           \nnames(summary_table) <- c(\"Sensitivity\", \"Specificity\", \"Accuracy\")                          \n                           \nsummary_table\n\n```\n\n\n",
    "created" : 1606747694937.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4003774446",
    "id" : "87942959",
    "lastKnownWriteTime" : 1606982440,
    "last_content_update" : 1606986274392,
    "path" : "~/Desktop/-/Uni/Third Semester/Projects in Data Analytics for Decision Making/Project/Projects-DA-DecisionMaking/Project/report/model  (not finish).Rmd",
    "project_path" : "report/model  (not finish).Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}