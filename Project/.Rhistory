theme(legend.position = "none")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable by response",
y = "Quantity [units]")
#Representation of output variable in terms of SEX_MALE
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(SEX_MALE)), position = "dodge")+
labs(color = "", fill = "SEX_MALE", x = "RESPONSE", y = "count") +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable by Response",
y = "Quantity [units]")
#Respesentation of SEX_MALE per value
data %>%
ggplot(aes(SEX_MALE)) +
geom_bar(aes(fill = factor(SEX_MALE))) +
theme_bw()+
theme(legend.position = "Bottom")  +
geom_label(stat = 'count', aes(label =..count..)) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable",
y = "Quantity [units]")
#Representation of output variable in terms of SEX_MALE
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(SEX_MALE)), position = "dodge")+
labs(color = "", fill = "SEX_MALE", x = "RESPONSE", y = "count") +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable by Response",
y = "Quantity [units]")
#Respesentation of SEX_MALE per value
data %>%
ggplot(aes(SEX_MALE)) +
geom_bar(aes(fill = factor(SEX_MALE))) +
theme_bw()+
theme(legend.position = "bottom")  +
geom_label(stat = 'count', aes(label =..count..)) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable",
y = "Quantity [units]")
#Representation of output variable in terms of SEX_MALE
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(SEX_MALE)), position = "dodge")+
labs(color = "", fill = "SEX_MALE", x = "RESPONSE", y = "count") +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Sex_variable", fill="Gender[0=woman, 1=man]",
title = "Proportion of the Sex_male variable by Response",
y = "Quantity [units]")
#variable creation
data %<>%
mutate(PURPOSE = ifelse(NEW_CAR == 1, 1,
ifelse(USED_CAR == 1, 2,
ifelse(FURNITURE == 1, 3,
ifelse(RADIO.TV == 1, 4,
ifelse(EDUCATION == 1, 5,
ifelse(RETRAINING == 1, 6, 0))))))) %>%
mutate(PURPOSE = as.factor(PURPOSE))
data %>%
ggplot(aes(PURPOSE)) +
geom_bar(aes(reorder(PURPOSE, -table(PURPOSE)[PURPOSE]), fill = PURPOSE)) +
scale_fill_discrete(name = "PURPOSE",
labels = c("OTHER", "NEW_CAR", "USED_CAR", "FURNITURE",
"RADIO/TV", "EDUCATION", "RETRAINING")) +
geom_label(stat = 'count', aes(label =..count..)) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of purpose", fill="Purpose",
title = "Variable Purpose quantities by type",
y = "Quantity [units]")
data %>%
ggplot(aes(PURPOSE)) +
geom_bar(aes(reorder(PURPOSE, -table(PURPOSE)[PURPOSE]), fill = PURPOSE)) +
scale_fill_discrete(name = "PURPOSE",
labels = c("OTHER", "NEW_CAR", "USED_CAR", "FURNITURE",
"RADIO/TV", "EDUCATION", "RETRAINING")) +
geom_label(stat = 'count', aes(label =..count..)) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of purpose", fill="Purpose",
title = "Purpose Variable quantities by type",
y = "Quantity [units]")
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(PURPOSE)), position = "dodge") +
labs(x = "RESPONSE", y = "count") +
scale_fill_discrete(name = "PURPOSE",
labels = c("OTHER", "NEW_CAR", "USED_CAR", "FURNITURE",
"RADIO/TV", "EDUCATION", "RETRAINING")) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of purpose by Response", fill="Purpose",
title = "Purpose Variable grouped by answer",
y = "Quantity [units]")
ggThemeAssist:::ggThemeAssistAddin()
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(PURPOSE)), position = "dodge") +
labs(x = "RESPONSE", y = "count") +
scale_fill_discrete(name = "PURPOSE",
labels = c("OTHER", "NEW_CAR", "USED_CAR", "FURNITURE",
"RADIO/TV", "EDUCATION", "RETRAINING")) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of purpose by Response", fill="Purpose",
subtitle = "On the left grouped by Response=0, on the right grouped by Response=1",
title = "Purpose Variable grouped by answer",
y = "Quantity [units]") +
theme(plot.subtitle = element_text(face = "italic"))
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = factor(PURPOSE)), position = "dodge") +
labs(x = "RESPONSE", y = "count") +
scale_fill_discrete(name = "PURPOSE",
labels = c("OTHER", "NEW_CAR", "USED_CAR", "FURNITURE",
"RADIO/TV", "EDUCATION", "RETRAINING")) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of purpose by Response", fill="Purpose",
subtitle = "On the left grouped by Response=0, on the right grouped by Response=1",
title = "Purpose Variable grouped by answer",
y = "Quantity [units]") +
theme(plot.subtitle = element_text(face = "italic"))
#Property variable creation
data %<>%
mutate(PROPERTY = as.factor(ifelse(REAL_ESTATE == 1, 1,
ifelse(PROP_UNKN_NONE == 1, 2, 0))))
data %>%
ggplot(aes(PROPERTY)) + geom_bar(aes(fill = PROPERTY)) +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE")) +
geom_label(stat = 'count', aes(label =..count..))
#Property variable creation
data %<>%
mutate(PROPERTY = as.factor(ifelse(REAL_ESTATE == 1, 1,
ifelse(PROP_UNKN_NONE == 1, 2, 0))))
data %>%
ggplot(aes(PROPERTY)) + geom_bar(aes(fill = PROPERTY)) +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE")) +
geom_label(stat = 'count', aes(label =..count..))
data %>%
ggplot(aes(PROPERTY)) + geom_bar(aes(fill = PROPERTY)) +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE")) +
geom_label(stat = 'count', aes(label =..count..))
data %>%
ggplot(aes(PROPERTY)) + geom_bar(aes(fill = PROPERTY)) +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE")) +
geom_label(stat = 'count', aes(label =..count..))  +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of Property", fill="Property",
title = "Property Variable ranking by type",
y = "Quantity [units]")
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = PROPERTY), position = "dodge") +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE"))
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of property by Response", fill="Property",
subtitle = "On the left grouped by Response=0, on the right grouped by Response=1",
title = "Property Variable grouped by answer",
y = "Quantity [units]") +
theme(plot.subtitle = element_text(face = "italic"))
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = PROPERTY), position = "dodge") +
scale_fill_discrete(name = "PROPERTY",
labels = c("OTHER", "REAL_ESTATE", "PROP_UNKN_NONE"))+
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of property by Response", fill="Property",
subtitle = "On the left grouped by Response=0, on the right grouped by Response=1",
title = "Property Variable grouped by answer",
y = "Quantity [units]") +
theme(plot.subtitle = element_text(face = "italic"))
chisq.test(data$RENT, data$OWN_RES)
#Residence variable creation
data %<>%
mutate(RESIDENCE = as.factor(ifelse(RENT == 1, 1,
ifelse(OWN_RES == 1, 2, 0))))
data %>%
ggplot(aes(RESIDENCE)) +
geom_bar(aes(fill = RESIDENCE)) +
scale_fill_discrete(name = "RESIDENCE", labels = c("OTHER", "RENT", "OWN_RES"))+
geom_label(stat = 'count', aes(label =..count..))
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = RESIDENCE), position = "dodge") +
scale_fill_discrete(name = "RESIDENCE",
labels = c("OTHER", "RENT", "OWN_RES"))
data %>%
ggplot(aes(RESIDENCE)) +
geom_bar(aes(fill = RESIDENCE)) +
scale_fill_discrete(name = "RESIDENCE", labels = c("OTHER", "RENT", "OWN_RES"))+
geom_label(stat = 'count', aes(label =..count..)) +
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of Residence", fill="Residence",
title = "Residence Variable ranking",
y = "Quantity [units]")
data %>%
ggplot(aes(RESPONSE)) +
geom_bar(aes(fill = RESIDENCE), position = "dodge") +
scale_fill_discrete(name = "RESIDENCE",
labels = c("OTHER", "RENT", "OWN_RES"))+
theme_bw()+
theme(legend.position = "bottom")  +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(x = "Type of Residence by Response", fill="Residence",
subtitle = "On the left grouped by Response=0, on the right grouped by Response=1",
title = "Residence Variable grouped by answer",
y = "Quantity [units]") +
theme(plot.subtitle = element_text(face = "italic"))
cor(data[2:30], data$RESPONSE) %>% as.data.frame() %>% dplyr::arrange(abs(V1))
round(as.numeric(cor(data[2:30], data$RESPONSE)),2) %>% as.data.frame() %>% dplyr::arrange(abs(V1))
cor(data[2:30], data$RESPONSE) %>% as.data.frame() %>% dplyr::arrange(abs(V1))
set.seed(2143)
lm.sel <- glm(RESPONSE ~., data = data_sel)
#selection of the variables to work with
data_sel <- data %>%
dplyr::select(CHK_ACCT, DURATION, HISTORY, PURPOSE,
AMOUNT, SAV_ACCT, EMPLOYMENT, INSTALL_RATE,
SEX_MALE, MALE_SINGLE, MALE_MAR_or_WID,
CO.APPLICANT, GUARANTOR, PRESENT_RESIDENT,
PROPERTY, AGE, OTHER_INSTALL, RESIDENCE,
NUM_CREDITS, JOB, TELEPHONE, RESPONSE)
set.seed(2143)
lm.sel <- glm(RESPONSE ~., data = data_sel)
lm.sel <- step(lm.sel, trace = 0)
summary(lm.sel)
data_sel <- lm.sel$model
data_sel %<>%
mutate(
CHK_ACCT = as.factor(CHK_ACCT),
HISTORY = as.factor(HISTORY),
SAV_ACCT = as.factor(SAV_ACCT),
EMPLOYMENT = as.factor(EMPLOYMENT),
MALE_SINGLE = as.factor(MALE_SINGLE),
GUARANTOR = as.factor(GUARANTOR),
OTHER_INSTALL = as.factor(OTHER_INSTALL),
TELEPHONE = as.factor(TELEPHONE),
RESPONSE = as.factor(RESPONSE)
)
str(data_sel)
data_sel %<>%
mutate(
CHK_ACCT = as.factor(CHK_ACCT),
HISTORY = as.factor(HISTORY),
SAV_ACCT = as.factor(SAV_ACCT),
EMPLOYMENT = as.factor(EMPLOYMENT),
MALE_SINGLE = as.factor(MALE_SINGLE),
GUARANTOR = as.factor(GUARANTOR),
OTHER_INSTALL = as.factor(OTHER_INSTALL),
TELEPHONE = as.factor(TELEPHONE),
RESPONSE = as.factor(RESPONSE)
)
str(data_sel)
############# Function for draw the confussion matrix####################################
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, '0', cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, '1', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, '0', cex=1.2, srt=90)
text(140, 335, '1', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="",
main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
#selecting only the continuous variables to scale them
p1<- data_sel %>%
tidyr::gather(variable, value, c("DURATION", "AMOUNT",  #we do not include age
"INSTALL_RATE","NUM_CREDITS")) %>%
ggplot(aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_bw() +
coord_flip()+
theme(legend.position="none")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Non-standardized variables",
x = "Variables", y = "Value (units)")
data_scale <- data_sel %>%
dplyr::select(DURATION, AMOUNT, #we eliminate AGE as well
INSTALL_RATE, NUM_CREDITS) %>%
scale() %>%  #normalization
as.data.frame()
#recreating the other variables to add them back to the dataset of the scaled ones
data_scale %<>% mutate(
CHK_ACCT = data_sel$CHK_ACCT,
HISTORY = data_sel$HISTORY,
PURPOSE = data_sel$PURPOSE,
SAV_ACCT = data_sel$SAV_ACCT,
EMPLOYMENT = data_sel$EMPLOYMENT,
SEX_MALE = data_sel$SEX_MALE,
MALE_SINGLE = data_sel$MALE_SINGLE,
MALE_MAR_WID = data_sel$MALE_MAR_WID,
CO_APPLICANT = data_sel$CO_APPLICANT,
GUARANTOR = data_sel$GUARANTOR,
PRESENT_RESIDENT = data_sel$PRESENT_RESIDENT,
PROPERTY = data_sel$PROPERTY,
OTHER_INSTALL = data_sel$OTHER_INSTALL,
RESIDENCE = data_sel$RESIDENCE,
JOB = data_sel$JOB,
RESPONSE = data_sel$RESPONSE
)
#reordering variable in the dataset- we do not include the not selected variables
data_scale %<>%
dplyr::select(CHK_ACCT,DURATION,HISTORY,PURPOSE,AMOUNT,SAV_ACCT,EMPLOYMENT,
INSTALL_RATE, MALE_SINGLE,GUARANTOR,
PROPERTY,OTHER_INSTALL,RESIDENCE,NUM_CREDITS, RESPONSE) #TELEPHONE
p2<- data_scale %>%
tidyr::gather(variable, value, c("DURATION", "AMOUNT",
"INSTALL_RATE", "NUM_CREDITS")) %>%
ggplot(aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_bw() +
coord_flip()+
theme(legend.position="bottom")+
theme(legend.title = element_blank())+
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Standardized variables",
x = "Variables", y = "Value (units)")
gridExtra::grid.arrange(p1, p2, ncol=2, nrow = 1)
rm(p1, p2)
##################quetion--> it is ok that we have negatives values##################
#so that we always have the same division
set.seed(2311)
#creation of the index to divide the data in the two subsets
val_index<-createDataPartition(data_scale$RESPONSE,
p=0.75, list=FALSE)
#########training dataset
TrainData<-as.data.frame(data_scale[val_index,])
########test dataset
TestData <- data_scale[-val_index,]
####################graph############################################
#table for the graph of training and testing
Data_set<- c("Total", "Training", "Test")
Number_of_obs<- c(999, 750, 249)
p0<- gridExtra::grid.arrange(tableGrob(data.frame(Data_set,Number_of_obs)))
p1<- ggplot2::ggplot(data=data_scale, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 100%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
p2<- ggplot2::ggplot(data=TrainData, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 75%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
p3<- ggplot2::ggplot(data=TestData, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 25%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
grid.arrange(p0, p1, p2, p3, ncol=2)
rm(p1, p0, p2, p3, Data_set, Number_of_obs) #delete variables
#so that we always have the same division
set.seed(2311)
#creation of the index to divide the data in the two subsets
val_index<-createDataPartition(data_scale$RESPONSE,
p=0.75, list=FALSE)
#########training dataset
TrainData<-as.data.frame(data_scale[val_index,])
########test dataset
TestData <- data_scale[-val_index,]
####################graph############################################
#table for the graph of training and testing
Data_set<- c("Total", "Training", "Test")
Number_of_obs<- c(999, 750, 249)
p0<- gridExtra::grid.arrange(tableGrob(data.frame(Data_set,Number_of_obs)))
p1<- ggplot2::ggplot(data=data_scale, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
theme_bw()+
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 100%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
p2<- ggplot2::ggplot(data=TrainData, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
theme_bw()+
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 75%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
p3<- ggplot2::ggplot(data=TestData, aes(x= RESPONSE, fill=RESPONSE)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
theme_bw()+
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- Data 25%",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")
grid.arrange(p0, p1, p2, p3, ncol=2)
rm(p1, p0, p2, p3, Data_set, Number_of_obs) #delete variables
#Same division
set.seed(1234)
#########################model######################################
train_params <- caret::trainControl(method = "repeatedcv", number = 10, repeats=5)
#10-Fold Cross Validation   #5 repetitions
mod_lg_fit <- caret::train(RESPONSE ~ ., TrainData, method="glm",
family="binomial",trControl= train_params)
################check outputs################################
summary(mod_lg_fit)
#prediction given the model
plot_pred_unbalance <- as.data.frame(as.vector(lg.pred))
#prediction given the model
lg.pred <- predict(mod_lg_fit, newdata = TestData)
#prediction given the model
plot_pred_unbalance <- as.data.frame(as.vector(lg.pred))
names(plot_pred_unbalance)<- c("predictions")
#table for the graph of training and testing
p<- ggplot2::ggplot(data=plot_pred_unbalance, aes(x= predictions, fill=predictions)) +
geom_bar(aes(y = (..count..)/sum(..count..)))+
scale_y_continuous(labels=scales::percent) +
ylab("Freq")+
theme(legend.title = element_blank()) +
theme(plot.title = element_text(face = "bold",  hjust = 0.5)) +
labs(title = "Response Ratio- testing unbalance",
x = "Response [no=0 /yes=1]", y = "Frequency (%)")+
theme_bw()
p
rm(plot_pred_unbalance, p)
#############confusion matrix
cm <- confusionMatrix(as.factor(lg.pred), as.factor(TestData$RESPONSE))
############draw of confusion matrix
draw_confusion_matrix(cm)
#### save the variables#######
sens<- caret::sensitivity(table(as.factor(lg.pred), as.factor(TestData$RESPONSE)))
sp<- caret::specificity(table(as.factor(lg.pred), as.factor(TestData$RESPONSE)))
acc<- cm$overall["Accuracy"]
logistic<- c(sens , sp, acc)
#############remove temporary element
rm(cm, sens, sp, acc)
logistic
logistic<-as.numeric(logistic)
logistic
logistic<-round(as.numeric(logistic),2)
logistic
summarydata<- print(summarytools::dfSummary(data, valid.col = FALSE,
graph.magnif = 0.75),
max.tbl.height = 300, method = "render")
summarydata
